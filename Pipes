// This program simulates pipes that are used to transfer data between processes.

// include all the necessary libraries
#include <stdio.h>    // for system input and output
#include <stdlib.h>   // for system functions
#include <unistd.h>   // for system calls
#include <sys/wait.h> // for wait system call
#include <time.h>     // for time functions

// define constants
#define NUM_READINGS 10 // number of readings

// main function
int main()
{
    // declare variables
    pid_t pid_conv, pid_log, pid_stat, pid_report;               // process IDs
    int pipe_conv_log[2], pipe_log_stat[2], pipe_stat_report[2]; // pipes
    int readings[NUM_READINGS];                                  // array of readings
    int sum = 0;                                                 // sum of readings
    float mean;                                                  // mean of readings

    // create pipes
    if (pipe(pipe_conv_log) == -1 || pipe(pipe_log_stat) == -1 || pipe(pipe_stat_report) == -1) // if pipe creation failed
    {
        perror("pipe"); // print error message
        exit(1);        // exit with error
    }

    // fork Conv process
    pid_conv = fork(); // fork Conv process
    srand(time(0));    // seed the random number generator

    // check if fork was successful
    if (pid_conv == 0) // if Conv process
    {
        // Conv process
        int i;                             // loop counter
        for (i = 0; i < NUM_READINGS; i++) // loop 10 times
        {
            // generate random numbers as readings
            readings[i] = rand() % 100; // generate a random number between 0 and 99
        }
        // send readings to Log and Stat processes
        write(pipe_conv_log[1], readings, sizeof(int) * NUM_READINGS); // write readings to pipe
        write(pipe_log_stat[1], readings, sizeof(int) * NUM_READINGS); // write readings to pipe
        exit(0);                                                       // exit
    }

    // fork Log process
    pid_log = fork(); // fork Log process

    // check if fork was successful
    if (pid_log == 0) // if Log process
    {
        // Log process
        read(pipe_conv_log[0], readings, sizeof(int) * NUM_READINGS); // read readings from pipe

        // write readings to local file
        FILE *fp = fopen("readings.txt", "w"); // open file for writing
        int i;                                 // loop counter
        for (i = 0; i < NUM_READINGS; i++)     // loop 10 times
        {
            fprintf(fp, "%d\n", readings[i]); // write reading to file
        }
        fclose(fp); // close file
        exit(0);    // exit
    }// fork Stat process
    pid_stat = fork(); // fork Stat process

    // check if fork was successful
    if (pid_stat == 0) // if Stat process
    {
        // Stat process
        read(pipe_log_stat[0], readings, sizeof(int) * NUM_READINGS); // read readings from pipe
        int i;                                                        // loop counter
        for (i = 0; i < NUM_READINGS; i++)                            // loop 10 times
        {
            sum += readings[i]; // add reading to sum
        }
        // calculate mean
        mean = (float)sum / NUM_READINGS; // calculate mean

        // send statistical data to Report process
        write(pipe_stat_report[1], &sum, sizeof(int));    // write sum to pipe
        write(pipe_stat_report[1], &mean, sizeof(float)); // write mean to pipe
        exit(0);                                          // exit
    }

    // fork Report process
    pid_report = fork(); // fork Report process

    // check if fork was successful
    if (pid_report == 0) // if Report process
    {
        // Report process
        read(pipe_stat_report[0], &sum, sizeof(int));    // read sum from pipe
        read(pipe_stat_report[0], &mean, sizeof(float)); // read mean from pipe

        // output statistical data to shell
        printf("Sum: %d\n", sum);   // print sum
        printf("Mean: %f\n", mean); // print mean
        exit(0);                    // exit
    }

    // wait for child processes to terminate
    waitpid(pid_conv, NULL, 0);   // wait for Conv process to terminate
    waitpid(pid_log, NULL, 0);    // wait for Log process to terminate
    waitpid(pid_stat, NULL, 0);   // wait for Stat process to terminate
    waitpid(pid_report, NULL, 0); // wait for Report process to terminate

    return 0; // exit with success
}

